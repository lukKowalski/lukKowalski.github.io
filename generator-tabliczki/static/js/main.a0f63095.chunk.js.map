{"version":3,"sources":["PrintTables.js","App.js","serviceWorker.js","index.js","utils.js"],"names":["DivRow","pair","result","className","MulRow","ItemsTable","pairs","type","map","idx","key","Set","list","Row","Col","md","slice","length","PrintTables","max","amount","perPage","Container","generateList","App","useState","setType","setMax","setAmount","setPerPage","href","Form","Group","as","controlId","Control","value","onChange","e","target","Alert","variant","Button","size","onClick","window","print","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","randomIntToN","x","Math","ceil","random","randomPair","first","min","floor","ifLastThreeContainPair","i","arr","push","module","exports","printList","str","forEach","el","createDivision"],"mappings":"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","file":"static/js/main.a0f63095.chunk.js","sourcesContent":["import React from \"react\";\nimport { generateList } from \"./utils\";\nimport { Row, Col, Container } from \"react-bootstrap\";\n\nconst DivRow = ({ pair }) => {\n    const result = pair[0] * pair[1];\n\n    return <tr>\n        <td>{result}</td>\n        <td>/</td>\n        <td>{pair[0]}</td>\n        <td>=</td>\n        <td className=\"result-box\"></td>\n    </tr>\n}\n\nconst MulRow = ({ pair }) => <tr>\n    <td>{pair[0]}</td>\n    <td>⋅</td>\n    <td>{pair[1]}</td>\n    <td>=</td>\n    <td className=\"result-box\"></td>\n</tr>\n    \n\nconst ItemsTable = ({ pairs, type }) => <table className=\"default-table\">\n    <tbody>\n        {\n            pairs.map(\n                (pair, idx) => type === \"mul\" ? <MulRow key={idx} pair={pair} /> : <DivRow key={idx} pair={pair} />\n            )\n        }\n    </tbody>\n</table>\n\nconst Set = ({ type, list }) => <Row>\n    <Col md={5}>\n        <ItemsTable pairs={list.slice(0, list.length/2)} type={type === \"divOnly\" ? \"div\" : \"mul\"} />\n    </Col>\n    <Col md={5}>\n        <ItemsTable pairs={list.slice(list.length/2)} type={type === \"mulOnly\" ? \"mul\" : \"div\"} />\n    </Col>\n</Row>\n\nexport const PrintTables = ({ type, max, amount, perPage }) => {\n    return <Container>\n        <Row>\n            <Col md={5}>\n                <Row>\n                    <Col><h5 className=\"set-name\">Zestaw 1</h5></Col>\n                </Row>\n                <Set list={generateList(max, amount)} type={type}/>\n            </Col>\n            {\n                perPage > 1 ?\n                <Col md={5}>\n                    <Row>\n                        <Col><h5 className=\"set-name\">Zestaw 2</h5></Col>\n                    </Row>\n                    {perPage > 1 ? <Set list={generateList(max, amount)} type={type}/> : null}\n                </Col> :\n                null\n            }\n        </Row>\n        <Row className=\"mt-5\">\n            {\n                perPage > 2 ?\n                <Col md={5}>\n                    <Row>\n                        <Col><h5 className=\"set-name\">Zestaw 3</h5></Col>\n                    </Row>\n                    {perPage > 1 ? <Set list={generateList(max, amount)} type={type}/> : null}\n                </Col> :\n                null\n            }\n            {\n                perPage > 3 ?\n                <Col md={5}>\n                    <Row>\n                        <Col><h5 className=\"set-name\">Zestaw 4</h5></Col>\n                    </Row>\n                    {perPage > 1 ? <Set list={generateList(max, amount)} type={type}/> : null}\n                </Col> :\n                null\n            }\n        </Row>\n    </Container>\n}","import React, { useState } from 'react';\nimport './App.css';\nimport { PrintTables } from \"./PrintTables\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { Container, Row, Col, Form, Alert, Button } from 'react-bootstrap';\n\n\n\nfunction App() {\n  const [type, setType] = useState(\"default\");\n  const [max, setMax] = useState(50);\n  const [amount, setAmount] = useState(40);\n  const [perPage, setPerPage] = useState(4);\n\n  return (\n    <div className=\"App\">\n      <Container className=\"controls-section mt-3 p-4 mb-4\">\n        <Row>\n          <Col>\n            <h4>Generator tabliczki mnozenia</h4>\n            <small>repo: <a href=\"https://github.com/lukKowalski/multiplication-table-generator\">\n            https://github.com/lukKowalski/multiplication-table-generator</a> </small>\n          </Col>\n        </Row>\n        <Form className=\"mt-3\">\n          <Form.Group as={Row} controlId=\"formPlaintextEmail\">\n            <Col>\n              <Form.Control \n                as=\"select\"\n                value={type}\n                onChange={e => setType(e.target.value)}\n              >\n                <option value=\"mulOnly\">Mnozenie</option>\n                <option value=\"divOnly\">Dzielenie</option>\n                <option value=\"default\">Mnozenie i dzielenie</option>\n              </Form.Control>\n            </Col>\n            <Col>\n              <Form.Control \n                as=\"select\"\n                value={max}\n                onChange={e => setMax(e.target.value)} \n              >\n                <option value={20}>Działania do 20</option>\n                <option value={30}>Działania do 30</option>\n                <option value={40}>Działania do 40</option>\n                <option value={50}>Działania do 50</option>\n                <option value={100}>Działania do 100</option>\n              </Form.Control>\n            </Col>\n            <Col>\n              <Form.Control \n                as=\"select\"\n                value={amount}\n                onChange={e => setAmount(e.target.value)} \n              >\n                <option value={10}>10 Przykładów</option>\n                <option value={20}>20 Przykładów</option>\n                <option value={30}>30 Przykładów</option>\n                <option value={40}>40 Przykładów</option>\n              </Form.Control>\n            </Col>\n            <Col>\n              <Form.Control \n                as=\"select\"\n                value={perPage}\n                onChange={e => setPerPage(e.target.value)}\n              >\n                <option value={1}>1 Zestaw na stronę</option>\n                <option value={2}>2 Zestawy na stronę</option>\n                <option value={3}>3 Zestawy na stronę</option>\n                <option value={4}>4 Zestawy na stronę</option>\n              </Form.Control>\n            </Col>\n          </Form.Group>\n        </Form>\n        <Row>\n          <Col>\n            <Alert variant=\"info\">Wciśnij Ctrl + P aby uzyskać wersję do druku, lub wciśnij ten przycisk: <Button size=\"sm\" onClick={window.print} variant=\"secondary\">Drukuj</Button></Alert>\n          </Col>\n        </Row>\n      </Container>\n      <Container>\n        <PrintTables \n          type={type} \n          max={max} \n          amount={amount} \n          perPage={perPage} \n        />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const randomIntToN = x => Math.ceil(Math.random() * x);\n\nconst randomPair = max => {\n    const first = randomIntToN(10);\n    const second  = Math.min(10, randomIntToN(Math.floor(max/first)));\n\n    return [first, second];\n}\n\nconst ifLastThreeContainPair = (pair, list) => {\n  let i = list.length - 1;\n  while (i > 0) {\n    const e = list[i];\n    if (\n      (e[0] === pair[0] && e[1] === pair[1])\n    ) {\n      return true;\n    }\n    i--;\n  }\n  return false;\n}\n\nconst generateList = (max, amount) => {\n  const arr = [];\n  \n  while(arr.length < amount) {\n    const pair = randomPair(max);\n\n    if (pair[0] && pair[1] && !ifLastThreeContainPair(pair, arr)) {\n      arr.push(pair);      \n    }\n  }\n  \n  return arr;\n}\n\nconst createMultiply = pair => `${pair[0]} * ${pair[1]} = ___`;\nconst createDivision = pair => {\n  const result = pair[0] * pair[1];\n  if (Math.random() >= 0.5) {\n    return `${result} : ${pair[0]} = ___`;\n  } else {\n    return `${result} : ${pair[1]} = ___`;\n  }\n}\n\nconst printList = (max, amount) => {\n    const space = \"        \";\n    const br = \"\\n\";\n\n    let str = \"\";\n\n    const list = generateList(max, amount);\n\n    list.forEach((el, idx) => {\n    if (idx % 2 > 0) {\n        str += createDivision(el);\n        str += br;\n    } else {\n        str += createMultiply(el);\n        str += space;    \n    }\n    });\n\n    return str\n}\n\nmodule.exports = {\n    generateList, \n    printList\n};"],"sourceRoot":""}